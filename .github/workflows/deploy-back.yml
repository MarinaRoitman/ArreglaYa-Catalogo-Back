name: Deploy Backend to EC2

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch: {}

concurrency:
  group: deploy-back
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # === Tests gate ===
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install deps (prod + test)
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install -r api/requirements_test.txt

      - name: Run unit tests
        run: pytest -q
      # === fin tests gate ===

      - name: Debug secrets (masked)
        shell: bash
        run: |
          set -e
          echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
          echo "EC2_USER: ${{ secrets.EC2_USER }}"
          if [ -z "${{ secrets.EC2_SSH_PASSWORD }}" ]; then
            echo "ERROR: Missing secret EC2_SSH_PASSWORD" >&2
            exit 1
          fi
          LEN=$(printf "%s" "${{ secrets.EC2_SSH_PASSWORD }}" | wc -c | tr -d ' ')
          HASH=$(printf "%s" "${{ secrets.EC2_SSH_PASSWORD }}" | sha256sum | cut -c1-12)
          echo "EC2_SSH_PASSWORD length: ${LEN}"
          echo "EC2_SSH_PASSWORD sha256 (first 12): ${HASH}"

      - name: Copy backend code to EC2 (password auth)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ci
          password: ${{ secrets.EC2_SSH_PASSWORD }}
          source: "api/**"
          target: "/home/ubuntu/catalogo/api"
          strip_components: 1
          overwrite: true
          rm: true
          timeout: 3m

      - name: Restart backend container on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ci
          password: ${{ secrets.EC2_SSH_PASSWORD }}
          script: |
            set -e
            cd /home/ubuntu/catalogo
            echo "== Pulling updated images =="
            sudo docker compose pull api || true
            echo "== Rebuilding backend container =="
            sudo docker compose build api
            echo "== Restarting API container =="
            sudo docker compose up -d api
            echo "== Logs (last 30 lines) =="
            sudo docker compose logs --tail=30 api
